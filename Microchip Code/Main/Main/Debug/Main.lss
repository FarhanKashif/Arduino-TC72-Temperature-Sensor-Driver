
Main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000046  00800100  000002e6  0000035a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000003a0  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003d0  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000a0  00000000  00000000  00000410  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000eb4  00000000  00000000  000004b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008fb  00000000  00000000  00001364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000059b  00000000  00000000  00001c5f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000016c  00000000  00000000  000021fc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004e1  00000000  00000000  00002368  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004b3  00000000  00000000  00002849  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000080  00000000  00000000  00002cfc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ee       	ldi	r30, 0xE6	; 230
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <main>
  8e:	0c 94 71 01 	jmp	0x2e2	; 0x2e2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <UART0_init>:

void printSerialFloat(float num)
{
	char buf[10];
	printSerialStr(dtostrf(num,4,2,buf));
}
  96:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
  9a:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
  9e:	e0 ec       	ldi	r30, 0xC0	; 192
  a0:	f0 e0       	ldi	r31, 0x00	; 0
  a2:	80 81       	ld	r24, Z
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	80 83       	st	Z, r24
  a8:	88 e1       	ldi	r24, 0x18	; 24
  aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
  ae:	86 e0       	ldi	r24, 0x06	; 6
  b0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
  b4:	08 95       	ret

000000b6 <UART0_send_char>:
  b6:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
  ba:	95 ff       	sbrs	r25, 5
  bc:	fc cf       	rjmp	.-8      	; 0xb6 <UART0_send_char>
  be:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
  c2:	08 95       	ret

000000c4 <printSerialStr>:
  c4:	0f 93       	push	r16
  c6:	1f 93       	push	r17
  c8:	cf 93       	push	r28
  ca:	df 93       	push	r29
  cc:	8c 01       	movw	r16, r24
  ce:	c0 e0       	ldi	r28, 0x00	; 0
  d0:	d0 e0       	ldi	r29, 0x00	; 0
  d2:	03 c0       	rjmp	.+6      	; 0xda <printSerialStr+0x16>
  d4:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART0_send_char>
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	f8 01       	movw	r30, r16
  dc:	ec 0f       	add	r30, r28
  de:	fd 1f       	adc	r31, r29
  e0:	80 81       	ld	r24, Z
  e2:	81 11       	cpse	r24, r1
  e4:	f7 cf       	rjmp	.-18     	; 0xd4 <printSerialStr+0x10>
  e6:	df 91       	pop	r29
  e8:	cf 91       	pop	r28
  ea:	1f 91       	pop	r17
  ec:	0f 91       	pop	r16
  ee:	08 95       	ret

000000f0 <printSerialStrln>:
  f0:	0f 93       	push	r16
  f2:	1f 93       	push	r17
  f4:	cf 93       	push	r28
  f6:	df 93       	push	r29
  f8:	8c 01       	movw	r16, r24
  fa:	c0 e0       	ldi	r28, 0x00	; 0
  fc:	d0 e0       	ldi	r29, 0x00	; 0
  fe:	03 c0       	rjmp	.+6      	; 0x106 <printSerialStrln+0x16>
 100:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART0_send_char>
 104:	21 96       	adiw	r28, 0x01	; 1
 106:	f8 01       	movw	r30, r16
 108:	ec 0f       	add	r30, r28
 10a:	fd 1f       	adc	r31, r29
 10c:	80 81       	ld	r24, Z
 10e:	81 11       	cpse	r24, r1
 110:	f7 cf       	rjmp	.-18     	; 0x100 <printSerialStrln+0x10>
 112:	8d e0       	ldi	r24, 0x0D	; 13
 114:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART0_send_char>
 118:	8a e0       	ldi	r24, 0x0A	; 10
 11a:	0e 94 5b 00 	call	0xb6	; 0xb6 <UART0_send_char>
 11e:	df 91       	pop	r29
 120:	cf 91       	pop	r28
 122:	1f 91       	pop	r17
 124:	0f 91       	pop	r16
 126:	08 95       	ret

00000128 <printSerialInt>:
void printSerialInt(int num)
{
 128:	cf 93       	push	r28
 12a:	df 93       	push	r29
 12c:	cd b7       	in	r28, 0x3d	; 61
 12e:	de b7       	in	r29, 0x3e	; 62
 130:	2a 97       	sbiw	r28, 0x0a	; 10
 132:	0f b6       	in	r0, 0x3f	; 63
 134:	f8 94       	cli
 136:	de bf       	out	0x3e, r29	; 62
 138:	0f be       	out	0x3f, r0	; 63
 13a:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 13c:	4a e0       	ldi	r20, 0x0A	; 10
 13e:	be 01       	movw	r22, r28
 140:	6f 5f       	subi	r22, 0xFF	; 255
 142:	7f 4f       	sbci	r23, 0xFF	; 255
 144:	0e 94 3c 01 	call	0x278	; 0x278 <__itoa_ncheck>
	
	char buf[10];
	printSerialStr(itoa(num,buf,10));
 148:	0e 94 62 00 	call	0xc4	; 0xc4 <printSerialStr>
	
}
 14c:	2a 96       	adiw	r28, 0x0a	; 10
 14e:	0f b6       	in	r0, 0x3f	; 63
 150:	f8 94       	cli
 152:	de bf       	out	0x3e, r29	; 62
 154:	0f be       	out	0x3f, r0	; 63
 156:	cd bf       	out	0x3d, r28	; 61
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	08 95       	ret

0000015e <SPI_Init>:


void SPI_Init()
{
	// Configure Pins
	DDRB |= (1<<CE) | (1<<MOSI) | (1<<SCK);
 15e:	84 b1       	in	r24, 0x04	; 4
 160:	8c 62       	ori	r24, 0x2C	; 44
 162:	84 b9       	out	0x04, r24	; 4
	DDRB &= ~(1<<MISO);
 164:	84 b1       	in	r24, 0x04	; 4
 166:	8f 7e       	andi	r24, 0xEF	; 239
 168:	84 b9       	out	0x04, r24	; 4
	
	// Set SPI Mode 0 (CPOL = 0, CPHA = 1)
	SPCR &= ~(1<<CPOL);
 16a:	8c b5       	in	r24, 0x2c	; 44
 16c:	87 7f       	andi	r24, 0xF7	; 247
 16e:	8c bd       	out	0x2c, r24	; 44
	SPCR |= (1<<CPHA);
 170:	8c b5       	in	r24, 0x2c	; 44
 172:	84 60       	ori	r24, 0x04	; 4
 174:	8c bd       	out	0x2c, r24	; 44
	
	// Select Master and Enable SPI
	SPCR |= (1<<MSTR) | (1<<SPE);
 176:	8c b5       	in	r24, 0x2c	; 44
 178:	80 65       	ori	r24, 0x50	; 80
 17a:	8c bd       	out	0x2c, r24	; 44
	
	// Pre-scalar
	SPCR |= (1<<SPR0);	// SPI clock speed= Fosc / 16
 17c:	8c b5       	in	r24, 0x2c	; 44
 17e:	81 60       	ori	r24, 0x01	; 1
 180:	8c bd       	out	0x2c, r24	; 44
 182:	08 95       	ret

00000184 <TC72_Select>:
}

void TC72_Select()
{
	PORTB |= (1<<CE);
 184:	85 b1       	in	r24, 0x05	; 5
 186:	84 60       	ori	r24, 0x04	; 4
 188:	85 b9       	out	0x05, r24	; 5
 18a:	08 95       	ret

0000018c <TC72_DeSelect>:
}

void TC72_DeSelect()
{
	PORTB &= ~(1<<CE);
 18c:	85 b1       	in	r24, 0x05	; 5
 18e:	8b 7f       	andi	r24, 0xFB	; 251
 190:	85 b9       	out	0x05, r24	; 5
 192:	08 95       	ret

00000194 <Transmit_Data>:
}

void Transmit_Data(uint8_t data)
{
	SPDR = data;
 194:	8e bd       	out	0x2e, r24	; 46
	while(!(SPSR & (1<<SPIF)));	// Reading SPIF Register
 196:	0d b4       	in	r0, 0x2d	; 45
 198:	07 fe       	sbrs	r0, 7
 19a:	fd cf       	rjmp	.-6      	; 0x196 <Transmit_Data+0x2>
}
 19c:	08 95       	ret

0000019e <Recieve_Data>:

uint8_t Recieve_Data()
{
	Transmit_Data(0x00);	// Transmit dummy data to recieve data byte
 19e:	80 e0       	ldi	r24, 0x00	; 0
 1a0:	0e 94 ca 00 	call	0x194	; 0x194 <Transmit_Data>
	while(!(SPSR & (1<<SPIF)));
 1a4:	0d b4       	in	r0, 0x2d	; 45
 1a6:	07 fe       	sbrs	r0, 7
 1a8:	fd cf       	rjmp	.-6      	; 0x1a4 <Recieve_Data+0x6>
	uint8_t recieve = SPDR;
 1aa:	8e b5       	in	r24, 0x2e	; 46
	return recieve;
}
 1ac:	08 95       	ret

000001ae <main>:

int main()
{
	uint8_t manufacturer_id, MSB;
	
	TC72_Select();
 1ae:	0e 94 c2 00 	call	0x184	; 0x184 <TC72_Select>
	
	// Initialize Interface
	SPI_Init();
 1b2:	0e 94 af 00 	call	0x15e	; 0x15e <SPI_Init>
	UART0_init(MYUBRR);
 1b6:	8f ec       	ldi	r24, 0xCF	; 207
 1b8:	90 e0       	ldi	r25, 0x00	; 0
 1ba:	0e 94 4b 00 	call	0x96	; 0x96 <UART0_init>
	
	printSerialStrln("Configured SPI...");
 1be:	80 e0       	ldi	r24, 0x00	; 0
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	0e 94 78 00 	call	0xf0	; 0xf0 <printSerialStrln>
	printSerialStrln("Starting Conversion");
 1c6:	82 e1       	ldi	r24, 0x12	; 18
 1c8:	91 e0       	ldi	r25, 0x01	; 1
 1ca:	0e 94 78 00 	call	0xf0	; 0xf0 <printSerialStrln>
	
	// Read Manufacture ID
	TC72_Select();
 1ce:	0e 94 c2 00 	call	0x184	; 0x184 <TC72_Select>
	Transmit_Data(0x03);	// Send Read Command to Control Register
 1d2:	83 e0       	ldi	r24, 0x03	; 3
 1d4:	0e 94 ca 00 	call	0x194	; 0x194 <Transmit_Data>
	manufacturer_id = Recieve_Data();
 1d8:	0e 94 cf 00 	call	0x19e	; 0x19e <Recieve_Data>
 1dc:	c8 2f       	mov	r28, r24
	TC72_DeSelect();
 1de:	0e 94 c6 00 	call	0x18c	; 0x18c <TC72_DeSelect>
	
	// Print Manufacture ID
	printSerialStr("Manufacturer ID: ");
 1e2:	86 e2       	ldi	r24, 0x26	; 38
 1e4:	91 e0       	ldi	r25, 0x01	; 1
 1e6:	0e 94 62 00 	call	0xc4	; 0xc4 <printSerialStr>
	printSerialInt(manufacturer_id);
 1ea:	8c 2f       	mov	r24, r28
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 94 00 	call	0x128	; 0x128 <printSerialInt>
	printSerialStrln("");
 1f2:	87 e3       	ldi	r24, 0x37	; 55
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 78 00 	call	0xf0	; 0xf0 <printSerialStrln>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fa:	8f e9       	ldi	r24, 0x9F	; 159
 1fc:	9f e0       	ldi	r25, 0x0F	; 15
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <main+0x50>
 202:	00 c0       	rjmp	.+0      	; 0x204 <main+0x56>
 204:	00 00       	nop
	
	_delay_ms(1);
	
	// Select Continuous Conversion Mode
	TC72_Select();
 206:	0e 94 c2 00 	call	0x184	; 0x184 <TC72_Select>
	Transmit_Data(0x80);	// Send Write Command
 20a:	80 e8       	ldi	r24, 0x80	; 128
 20c:	0e 94 ca 00 	call	0x194	; 0x194 <Transmit_Data>
	Transmit_Data(0x00);	// Configure Continuous Mode
 210:	80 e0       	ldi	r24, 0x00	; 0
 212:	0e 94 ca 00 	call	0x194	; 0x194 <Transmit_Data>
	TC72_DeSelect();
 216:	0e 94 c6 00 	call	0x18c	; 0x18c <TC72_DeSelect>
 21a:	9f ef       	ldi	r25, 0xFF	; 255
 21c:	22 e5       	ldi	r18, 0x52	; 82
 21e:	87 e0       	ldi	r24, 0x07	; 7
 220:	91 50       	subi	r25, 0x01	; 1
 222:	20 40       	sbci	r18, 0x00	; 0
 224:	80 40       	sbci	r24, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <main+0x72>
 228:	00 c0       	rjmp	.+0      	; 0x22a <main+0x7c>
 22a:	00 00       	nop
	
	_delay_ms(150);		// Time for first conversion
	
	while(1)
	{
		printSerialStr("Temperature: ");
 22c:	88 e3       	ldi	r24, 0x38	; 56
 22e:	91 e0       	ldi	r25, 0x01	; 1
 230:	0e 94 62 00 	call	0xc4	; 0xc4 <printSerialStr>
		
		TC72_Select();
 234:	0e 94 c2 00 	call	0x184	; 0x184 <TC72_Select>
		Transmit_Data(0x02);	// Read MSB
 238:	82 e0       	ldi	r24, 0x02	; 2
 23a:	0e 94 ca 00 	call	0x194	; 0x194 <Transmit_Data>
		MSB = Recieve_Data();	// Receive MSB
 23e:	0e 94 cf 00 	call	0x19e	; 0x19e <Recieve_Data>
 242:	c8 2f       	mov	r28, r24
		TC72_DeSelect();
 244:	0e 94 c6 00 	call	0x18c	; 0x18c <TC72_DeSelect>
 248:	8f e9       	ldi	r24, 0x9F	; 159
 24a:	9f e0       	ldi	r25, 0x0F	; 15
 24c:	01 97       	sbiw	r24, 0x01	; 1
 24e:	f1 f7       	brne	.-4      	; 0x24c <main+0x9e>
 250:	00 c0       	rjmp	.+0      	; 0x252 <main+0xa4>
 252:	00 00       	nop
		
		_delay_ms(1);
		
		printSerialInt(MSB);
 254:	8c 2f       	mov	r24, r28
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 94 00 	call	0x128	; 0x128 <printSerialInt>
		printSerialStrln("");
 25c:	87 e3       	ldi	r24, 0x37	; 55
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	0e 94 78 00 	call	0xf0	; 0xf0 <printSerialStrln>
 264:	9f ef       	ldi	r25, 0xFF	; 255
 266:	22 e5       	ldi	r18, 0x52	; 82
 268:	87 e0       	ldi	r24, 0x07	; 7
 26a:	91 50       	subi	r25, 0x01	; 1
 26c:	20 40       	sbci	r18, 0x00	; 0
 26e:	80 40       	sbci	r24, 0x00	; 0
 270:	e1 f7       	brne	.-8      	; 0x26a <main+0xbc>
 272:	00 c0       	rjmp	.+0      	; 0x274 <main+0xc6>
 274:	00 00       	nop
 276:	da cf       	rjmp	.-76     	; 0x22c <main+0x7e>

00000278 <__itoa_ncheck>:
 278:	bb 27       	eor	r27, r27
 27a:	4a 30       	cpi	r20, 0x0A	; 10
 27c:	31 f4       	brne	.+12     	; 0x28a <__itoa_ncheck+0x12>
 27e:	99 23       	and	r25, r25
 280:	22 f4       	brpl	.+8      	; 0x28a <__itoa_ncheck+0x12>
 282:	bd e2       	ldi	r27, 0x2D	; 45
 284:	90 95       	com	r25
 286:	81 95       	neg	r24
 288:	9f 4f       	sbci	r25, 0xFF	; 255
 28a:	0c 94 48 01 	jmp	0x290	; 0x290 <__utoa_common>

0000028e <__utoa_ncheck>:
 28e:	bb 27       	eor	r27, r27

00000290 <__utoa_common>:
 290:	fb 01       	movw	r30, r22
 292:	55 27       	eor	r21, r21
 294:	aa 27       	eor	r26, r26
 296:	88 0f       	add	r24, r24
 298:	99 1f       	adc	r25, r25
 29a:	aa 1f       	adc	r26, r26
 29c:	a4 17       	cp	r26, r20
 29e:	10 f0       	brcs	.+4      	; 0x2a4 <__utoa_common+0x14>
 2a0:	a4 1b       	sub	r26, r20
 2a2:	83 95       	inc	r24
 2a4:	50 51       	subi	r21, 0x10	; 16
 2a6:	b9 f7       	brne	.-18     	; 0x296 <__utoa_common+0x6>
 2a8:	a0 5d       	subi	r26, 0xD0	; 208
 2aa:	aa 33       	cpi	r26, 0x3A	; 58
 2ac:	08 f0       	brcs	.+2      	; 0x2b0 <__utoa_common+0x20>
 2ae:	a9 5d       	subi	r26, 0xD9	; 217
 2b0:	a1 93       	st	Z+, r26
 2b2:	00 97       	sbiw	r24, 0x00	; 0
 2b4:	79 f7       	brne	.-34     	; 0x294 <__utoa_common+0x4>
 2b6:	b1 11       	cpse	r27, r1
 2b8:	b1 93       	st	Z+, r27
 2ba:	11 92       	st	Z+, r1
 2bc:	cb 01       	movw	r24, r22
 2be:	0c 94 61 01 	jmp	0x2c2	; 0x2c2 <strrev>

000002c2 <strrev>:
 2c2:	dc 01       	movw	r26, r24
 2c4:	fc 01       	movw	r30, r24
 2c6:	67 2f       	mov	r22, r23
 2c8:	71 91       	ld	r23, Z+
 2ca:	77 23       	and	r23, r23
 2cc:	e1 f7       	brne	.-8      	; 0x2c6 <strrev+0x4>
 2ce:	32 97       	sbiw	r30, 0x02	; 2
 2d0:	04 c0       	rjmp	.+8      	; 0x2da <strrev+0x18>
 2d2:	7c 91       	ld	r23, X
 2d4:	6d 93       	st	X+, r22
 2d6:	70 83       	st	Z, r23
 2d8:	62 91       	ld	r22, -Z
 2da:	ae 17       	cp	r26, r30
 2dc:	bf 07       	cpc	r27, r31
 2de:	c8 f3       	brcs	.-14     	; 0x2d2 <strrev+0x10>
 2e0:	08 95       	ret

000002e2 <_exit>:
 2e2:	f8 94       	cli

000002e4 <__stop_program>:
 2e4:	ff cf       	rjmp	.-2      	; 0x2e4 <__stop_program>
